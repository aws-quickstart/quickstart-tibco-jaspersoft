{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This workload template deploys an Auto Scaling group behind an Application Load Balancer in two private subnets. The cluster is configured to use an S3 bucket for storage **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template. (qs-1puat849f)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network configuration"
                    },
                    "Parameters": [
                        "VPCID",
                        "PrivateSubnet1ID",
                        "PrivateSubnet2ID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID",
                        "BastionSecurityGroupID"
                    ]
                },
                {
                    "Label": {
                        "default": "TIBCO JasperReports Server node and cluster configuration"
                    },
                    "Parameters": [
                        "WorkloadInstanceType",
                        "KeyPairName",
                        "S3BucketName",
                        "WorkloadNodesMinSize",
                        "WorkloadNodesMaxSize",
                        "WorkloadNodesDesiredCapacity",
                        "OperatorEmail"
                    ]
                },
                {
                    "Label": {
                        "default": "Repository Database configuration"
                    },
                    "Parameters": [
                        "RDSAddress",
                        "RDSPort",
                        "RDSUser",
                        "RDSPassword",
                        "DBName",
                        "IncludeSamples"
                    ]
                }
            ],
            "ParameterLabels": {
                "BastionSecurityGroupID": {
                    "default": "Bastion security group ID"
                },
                "KeyPairName": {
                    "default": "Key pair name"
                },
                "OperatorEmail": {
                    "default": "Operator email address"
                },
                "PrivateSubnet1ID": {
                    "default": "Private subnet 1 ID"
                },
                "PrivateSubnet2ID": {
                    "default": "Private subnet 2 ID"
                },
                "PublicSubnet1ID": {
                    "default": "Public subnet 1 ID"
                },
                "PublicSubnet2ID": {
                    "default": "Public subnet 2 ID"
                },
                "RDAddress": {
                    "default": "RDS database address"
                },
                "RDSPort": {
                    "default": "RDS database port"
                },
                "RDSUser": {
                    "default": "RDS database user name"
                },
                "RDSPassword": {
                    "default": "RDS database password"
                },
                "DBName": {
                    "default": "RDS database name"
                },
                "VPCID": {
                    "default": "VPC ID"
                },
                "WorkloadInstanceType": {
                    "default": "Servers instance type"
                },
                "WorkloadNodesDesiredCapacity": {
                    "default": "Nodes desired capacity"
                },
                "WorkloadNodesMaxSize": {
                    "default": "Nodes maximum size"
                },
                "WorkloadNodesMinSize": {
                    "default": "Nodes minimum size"
                },
                "S3BucketName": {
                    "default" : "Name of S3 bucket for license and customization"
                },
                "IncludeSamples": {
                    "default" : "Include samples"
                }
            }
        }
    },
    "Parameters": {
        "BastionSecurityGroupID": {
            "Description": "ID of the bastion host security group to enable SSH connections (e.g., sg-7f16e910).",
            "Type": "AWS::EC2::SecurityGroup::Id",
            "MinLength": "1",
            "MaxLength": "64",
            "ConstraintDescription" : "Required"

        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 key pair, which allows you to securely connect to your instance after it launches.",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "MinLength": "1",
            "MaxLength": "64",
            "ConstraintDescription" : "Required"
        },
        "OperatorEmail": {
            "Description": "(Optional) Email address that notifications of any scaling operations will be sent to.",
            "Type": "String",
            "AllowedPattern": "(([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?))||(^$)",
            "ConstraintDescription": "Must be a valid email address."
        },
        "PrivateSubnet1ID": {
            "Description": "ID of private subnet 1 in Availability Zone 1 for the TIBCO JasperReports Servers (e.g., subnet-a0246dcd).",
            "Type": "AWS::EC2::Subnet::Id",
            "MinLength": "1",
            "MaxLength": "64",
            "ConstraintDescription" : "Required"
        },
        "PrivateSubnet2ID": {
            "Description": "ID of private subnet 2 in Availability Zone 2 for the TIBCO JasperReports Servers (e.g., subnet-b1f432cd).",
            "Type": "AWS::EC2::Subnet::Id",
            "MinLength": "1",
            "MaxLength": "64",
            "ConstraintDescription" : "Required"
        },
        "PublicSubnet1ID": {
            "Description": "ID of public subnet 1 in Availability Zone 1 for the Application Load Balancer (e.g., subnet-9bc642ac).",
            "Type": "AWS::EC2::Subnet::Id",
            "MinLength": "1",
            "MaxLength": "64",
            "ConstraintDescription" : "Required"
        },
        "PublicSubnet2ID": {
            "Description": "ID of public subnet 2 in Availability Zone 2 for the Application Load Balancer (e.g., subnet-e3246d8e).",
            "Type": "AWS::EC2::Subnet::Id",
            "MinLength": "1",
            "MaxLength": "64",
            "ConstraintDescription" : "Required"
        },
        "VPCID": {
            "Description": "ID of your existing VPC for deployment.",
            "Type": "AWS::EC2::VPC::Id",
            "MinLength": "1",
            "MaxLength": "64",
            "ConstraintDescription" : "Required"
        },
        "WorkloadInstanceType": {
            "Description": "Amazon EC2 instance type for the TIBCO JasperReports Server instances.. Has to be available for the deployment region.",
            "Type": "String",
            "AllowedValues": [
                "m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","r3.xlarge","r3.2xlarge","c4.xlarge","c4.2xlarge","m5.large"
            ],
            "Default": "m4.xlarge",
            "MinLength": "1",
            "ConstraintDescription": "Must contain valid instance type."
        },
        "WorkloadNodesDesiredCapacity": {
            "Description": "Desired number of nodes in the Auto Scaling group.",
            "Type": "Number",
            "Default": "1",
            "MinValue": "1",
            "MaxValue": "10",
            "ConstraintDescription" : "Required. Must be between 1 and 10."
        },
        "WorkloadNodesMaxSize": {
            "Description": "Maximum number of nodes in the Auto Scaling group.",
            "Type": "Number",
            "Default": "4",
            "MinValue": "1",
            "MaxValue": "10",
            "ConstraintDescription" : "Required. Must be between 1 and 10."
        },
        "WorkloadNodesMinSize": {
            "Description": "Minimum number of nodes in the Auto Scaling group.",
            "Type": "Number",
            "Default": "1",
            "MinValue": "1",
            "MaxValue": "10",
            "ConstraintDescription" : "Required. Must be between 1 and 10."
        },
        "RDSUser" : {
            "Description" : "Master user name for the RDS database.",
            "Type" : "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern" : "[-_a-zA-Z0-9]*",
            "ConstraintDescription" : "It can contain only alphanumeric characters and underscores."
        },
        "RDSPassword" : {
            "Description" : "Master password for the RDS database.",
            "Type" : "String",
            "MinLength": "1",
            "MaxLength": "64",
            "NoEcho" : "true",
            "AllowedPattern" : "[-_a-zA-Z0-9]*",
            "ConstraintDescription" : "It can contain only alphanumeric characters and underscores."
        },
        "RDSAddress" : {
            "Description" : "Domain/Address of the Amazon Postgres RDS database.",
            "Type" : "String",
            "MinLength": "1",
            "MaxLength": "128",
            "AllowedPattern" : "[-_a-zA-Z0-9\\.]*",
            "ConstraintDescription" : "Domain/Address should be letters, digits, '.', '-' or underscores. Maximum 128 characters long."
        },
        "RDSPort" : {
            "Description" : "RDS Port",
            "Type" : "Number",
            "Default" : "5432",
            "MinValue" : "1024",
            "ConstraintDescription" : "Port number should be higher than 1024"
        },
        "DBName" : {
            "Description" : "JasperReports Server repository database name.",
            "Type" : "String",
            "Default": "jasperserver",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern" : "[-_a-zA-Z0-9]*",
            "ConstraintDescription" : "Can contain only alphanumeric characters, minus and underscores."
        },
        "IncludeSamples" : {
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "ConstraintDescription": "Yes/No",
            "Default": "Yes",
            "Description": "Include Jaspersoft sample data, reports and dashboards.",
            "Type": "String"
        },
        "S3BucketName": {
            "Description" : "S3 bucket for license and customizations. Name of existing bucket, or leave blank to create a new bucket.",
            "Type" : "String",
            "Default" : "",
            "AllowedPattern" : "[-_a-z0-9]*",
            "MaxLength": "64",
            "ConstraintDescription" : "Can contain only alphanumeric characters, minus and underscores."
        }
    },
    "Rules": {
        "KeyPairsNotEmpty": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::Not": [
                            {
                                "Fn::EachMemberEquals": [
                                    {
                                        "Fn::RefAll": "AWS::EC2::KeyPair::KeyName"
                                    },
                                    ""
                                ]
                            }
                        ]
                    },
                    "AssertDescription": "All key pair parameters must not be empty"
                }
            ]
        },
        "SubnetsInVPC": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "All subnets must in the VPC"
                }
            ]
        }
    },
    "Conditions" : {
        "NotificationsEnabled" : {"Fn::Not" : [{"Fn::Equals": [{"Ref" : "OperatorEmail"}, ""]}]},
        "IncludeSamplesCondition": {"Fn::Equals": [{"Ref": "IncludeSamples"},"Yes"]},
        "CreateS3Bucket": {"Fn::Equals": [{"Ref": "S3BucketName"},""]}
    },
    "Mappings": {
        "AWSAMIRegionMap": {
        "us-east-1" : { "64" : "ami-057d9930d8c1fbedc"},
        "us-east-2" : { "64" : "ami-0dfeb4181439e69d0"},
        "us-west-1" : { "64" : "ami-0a8c2164d78c0bbb8"},
        "us-west-2" : { "64" : "ami-0025ed9e1b816d07c"},
        "ca-central-1" : { "64" : "ami-09a9d56a27865baf3"},
        "eu-central-1" : { "64" : "ami-0fbf47d12f4459525"},
        "eu-west-1" : { "64" : "ami-0377a7427365b0a53"},
        "eu-west-2" : { "64" : "ami-0f2c33e354084cea6"},
        "eu-west-3" : { "64" : "ami-0589232054b7ee870"},
        "eu-north-1" : { "64" : "ami-0c44d3d9cb57c6b9a"},
        "ap-southeast-1" : { "64" : "ami-09e099ae028778169"},
        "ap-southeast-2" : { "64" : "ami-0c68ca820e273e8ce"},
        "ap-south-1" : { "64" : "ami-08d0f13c0a870e2b1 "},
        "ap-northeast-1" : { "64" : "ami-012961ab8b3b10a64"},
        "ap-northeast-2" : { "64" : "ami-02f4812b8b09fd029"},
        "sa-east-1" : { "64" : "ami-0a35d6f9ba46a595f"},
        "us-gov-east-1"  : { "64" : "ami-5cac432d"},
        "us-gov-west-1"  : { "64" : "ami-fb320e9a"}
    }
    },
    "Resources": {
        "RDSInitJrsDBWaitHandle" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {
            }
        },
        "RDSInitWaitCondition" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "Properties" : {
                "Handle" : { "Ref" : "RDSInitJrsDBWaitHandle" },
                "Timeout" : "1800",
                "Count" : "1"
            }
        },
        "NotificationTopic": {
            "Condition" : "NotificationsEnabled",
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "OperatorEmail"
                        },
                        "Protocol": "email"
                    }
                ]
            },
            "DependsOn" : "RDSInitWaitCondition"
        },
        "ELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the ELB",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "PublicSubnet1ID"
                    },
                    {
                        "Ref": "PublicSubnet2ID"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "Type": "application"
            },
            "DependsOn" : "RDSInitWaitCondition"
        },
        "WorkloadELBListener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
                "DefaultActions" : [{
                    "Type" : "forward",
                    "TargetGroupArn" : { "Ref" : "WorkloadTargetGroup" }
                }],
                "LoadBalancerArn" : { "Ref" : "ElasticLoadBalancer" },
                "Port" : "80",
                "Protocol" : "HTTP"
            }
        },
        "WorkloadTargetGroup" :{
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
                "HealthCheckIntervalSeconds" : 90,
                "HealthCheckPath" : "/jasperserver-pro/login.html",
                "HealthCheckPort" : 80,
                "HealthCheckProtocol" : "HTTP",
                "HealthCheckTimeoutSeconds" : 15,
                "HealthyThresholdCount" : 2,
                "Matcher" : {
                    "HttpCode" : "200"
                },
                "Port" : 80,
                "Protocol" : "HTTP",
                "TargetType" : "instance",
                "UnhealthyThresholdCount" : 10,
                "TargetGroupAttributes" : [
                    { "Key" : "stickiness.enabled", "Value" : "true" },
                    { "Key" : "stickiness.lb_cookie.duration_seconds", "Value" : "86400" },
                    { "Key" : "stickiness.type", "Value" : "lb_cookie" }
                ],
                "VpcId" : { "Ref": "VPCID" }
            },
            "DependsOn" : "RDSInitWaitCondition"
        },
        "SetupRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                       "PolicyName":"WorkloadSetup",
                       "PolicyDocument":{
                          "Statement":[
                             {
                                "Effect":"Allow",
                                "Action":[
                                   "cloudwatch:PutMetricData",
                                   "cloudwatch:EnableAlarmActions",
                                   "cloudwatch:PutMetricAlarm"
                                ],
                                "Resource":"*"
                             },
                             {
                                "Effect":"Allow",
                                "Action":[
                                   "s3:*"
                                ],
                                "Resource":[
                                   {
                                      "Fn::Join":[
                                         "",
                                         [
                                            "arn:",
                                            {
                                               "Ref":"AWS::Partition"
                                            },
                                            ":s3:::",
                                            {
                                               "Fn::If":[
                                                  "CreateS3Bucket",
                                                  {
                                                     "Ref":"S3Bucket"
                                                  },
                                                  {
                                                     "Ref":"S3BucketName"
                                                  }
                                               ]
                                            },
                                            ""
                                         ]
                                      ]
                                   },
                                   {
                                      "Fn::Join":[
                                         "",
                                         [
                                            "arn:",
                                            {
                                               "Ref":"AWS::Partition"
                                            },
                                            ":s3:::",
                                            {
                                               "Fn::If":[
                                                  "CreateS3Bucket",
                                                  {
                                                     "Ref":"S3Bucket"
                                                  },
                                                  {
                                                     "Ref":"S3BucketName"
                                                  }
                                               ]
                                            },
                                            "/*"
                                         ]
                                      ]
                                   }
                                ]
                             }
                          ]
                       }
                    },
                    {
                        "PolicyName": "JRSRolePolicy",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "rds:Describe*",
                                        "rds:AuthorizeDBSecurityGroupIngress",
                                        "rds:CreateDBSecurityGroup",
                                        "rds:RevokeDBSecurityGroupIngress",
                                        "rds:ModifyDBInstance",
                                        "redshift:Describe*",
                                        "redshift:AuthorizeClusterSecurityGroupIngress",
                                        "redshift:CreateClusterSecurityGroup",
                                        "redshift:RevokeClusterSecurityGroupIngress",
                                        "redshift:ModifyCluster",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:AuthorizeSecurityGroupIngress",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:RevokeSecurityGroupIngress",
                                        "sqs:*",
                                        "s3:Get*",
                                        "s3:List*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            },
            "DependsOn" : "RDSInitWaitCondition"
        },
        "SetupRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SetupRole"
                    }
                ]
            }
        },
        "WorkloadInitializationInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets" : { "ConfigureAndInitialize" : ["Configure","Initialize"]},
                    "Configure": {
                        "files": {
                            "/var/lib/tomcat8/webapps/jasperserver-pro/WEB-INF/classes/repository.properties" : {
                                "content" : { "Fn::Join" : ["", [
                                    "dbUsername=",{ "Ref" : "RDSUser" },"\n",
                                    "dbPassword=",{ "Ref" : "RDSPassword" },"\n",
                                    "dbHost=",{ "Ref": "RDSAddress" },"\n",
                                    "dbPort=",{ "Ref": "RDSPort" },"\n",
                                    "dbType=postgresql","\n",
                                    "js.dbName=",{ "Ref" : "DBName" },"\n",
                                    ""
                                ]]},
                                "encoding" : "plain",
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "services" : {
                          "sysvinit" : {
                            "tomcat8" : {
                                "enabled" : "false",
                                "ensureRunning" : "false"
                            }
                        }
                        }
                    },
                    "Initialize" : {
                        "commands" : {
                            "initRdsDB" : {
                                "cwd" : "/usr/share/jrs_dist/jasperreports-server-bin/",
                                "command" : { "Fn::Join" : [" ", ["ksp=/etc/jasperserver ./deploy-database-to-external-repo.sh",{"Fn::If": ["IncludeSamplesCondition","normal","minimal"]}]]},
                                "failOnError" : "true"
                            }
                        }
                    }
                }
            },
            "Version": "2018-11-20",
            "Properties": {
                "InstanceInitiatedShutdownBehavior" : "stop",
                "ImageId": {"Fn::FindInMap" : [ "AWSAMIRegionMap", { "Ref" : "AWS::Region" }, "64" ]},
                "InstanceType": { "Ref" : "WorkloadInstanceType" },
                "KeyName" : { "Ref" : "KeyPairName" },
                "Monitoring": "false",
                "DisableApiTermination": "false",
                "SecurityGroupIds": [{ "Ref": "WorkloadSecurityGroup"}],
                "SubnetId" : {"Ref": "PrivateSubnet1ID" },
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "Content-Type: multipart/mixed; boundary=\"//\"\n",
                    "MIME-Version: 1.0\n",
                    "\n",
                    "--//\n",
                    "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                    "MIME-Version: 1.0\n",
                    "Content-Transfer-Encoding: 7bit\n",
                    "Content-Disposition: attachment; filename=\"cloud-config.txt\"\n",
                    "\n",
                    "#cloud-config\n",
                    "cloud_final_modules:\n",
                    "- [scripts-user, always]\n",
                    "\n",
                    "--//\n",
                    "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                    "MIME-Version: 1.0\n",
                    "Content-Transfer-Encoding: 7bit\n",
                    "Content-Disposition: attachment; filename=\"userdata.txt\"\n",
                    "\n",
                    "#!/bin/bash -xe\n",
                    "yum install -y aws-cfn-bootstrap\n",

                    "# Install the files and packages from the metadata\n",
                    "/opt/aws/bin/cfn-init ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource WorkloadInitializationInstance ",
                    "         --configsets ConfigureAndInitialize ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",

                    "# Signal the status from cfn-init\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "         --data \"Application has completed DB configuration.\"",
                    " ",{ "Fn::Base64" : { "Ref" : "RDSInitJrsDBWaitHandle"}},"\n",

                    "# Shutdown instance\n",
                    "/sbin/halt -p\n",
                    ""
                ]]}}
            }
        },
        "WorkloadSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to the TIBCO JasperReports Server instances",
                "VpcId": {
                    "Ref": "VPCID"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "SourceSecurityGroupId": {
                            "Ref": "BastionSecurityGroupID"
                        }
                    }
                ]
            }
        },
        "WorkloadSecurityGroupInternal" : {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId" : { "Fn::GetAtt": ["WorkloadSecurityGroup","GroupId"] },
                "IpProtocol" : "tcp",
                "FromPort" : "61616",
                "ToPort" : "61616",
                "SourceSecurityGroupId" : { "Fn::GetAtt": ["WorkloadSecurityGroup","GroupId"] }
            },
            "DependsOn" : "RDSInitWaitCondition"
        },
        "WorkloadASLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets" : { "ConfigureAndRestart" : ["Configure" , "Restart"] },
                    "Configure": {
                        "files": {
                            "/var/lib/tomcat8/webapps/jasperserver-pro/WEB-INF/classes/repository.properties" : {
                                "content" : {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "jasperserver_url=jdbc:postgresql://",{ "Ref": "RDSAddress" },":",{ "Ref": "RDSPort" },"/",{ "Ref" : "DBName" },"\n",
                                            "jasperserver_dbUsername=",{ "Ref" : "RDSUser" },"\n",
                                            "jasperserver_dbPassword=",{ "Ref" : "RDSPassword" },"\n",
                                            "jasperserver_driverClassName=org.postgresql.Driver","\n",
                                            {"Fn::If": ["IncludeSamplesCondition",{"Fn::Join": ["",[
                                                "sugarcrm_url=jdbc:postgresql://",{ "Ref": "RDSAddress" },":",{ "Ref": "RDSPort" },"/sugarcrm","\n",
                                                "sugarcrm_dbUsername=",{ "Ref" : "RDSUser" },"\n",
                                                "sugarcrm_dbPassword=",{ "Ref" : "RDSPassword" },"\n",
                                                "sugarcrm_driverClassName=org.postgresql.Driver","\n",
                                                "foodmart_url=jdbc:postgresql://",{ "Ref": "RDSAddress" },":",{ "Ref": "RDSPort" },"/foodmart","\n",
                                                "foodmart_dbUsername=",{ "Ref" : "RDSUser" },"\n",
                                                "foodmart_dbPassword=",{ "Ref" : "RDSPassword" },"\n",
                                                "foodmart_driverClassName=org.postgresql.Driver","\n"
                                             ]]},""]},
                                            ""
                                        ]
                                    ]
                                },
                                "encoding" : "plain",
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/var/lib/tomcat8/webapps/jasperserver-pro/WEB-INF/js.aws.properties" : {
                                "content" : {
                                    "Fn::Join": [
                                        "", [
                                            "js.aws.jms.queueName = ",{ "Fn::GetAtt" : [ "WorkloadSqsQueue", "QueueName" ]},"\n",
                                            "js.aws.jms.endpoint = sqs.", { "Ref": "AWS::Region" },".amazonaws.com","\n",
                                            ""
                                        ]
                                    ]
                                },
                                "encoding" : "plain",
                                "mode" : "000644",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "commands" : {
                          "1-pullLicense" : {
                            "command" : { "Fn::Join" : ["", ["/usr/bin/aws --region ",{ "Ref": "AWS::Region" }," s3 cp s3://",{"Fn::If": ["CreateS3Bucket",{"Ref": "S3Bucket"},{"Ref": "S3BucketName"}]},"/jasperserver.license /var/lib/tomcat8/webapps/jasperserver-pro/WEB-INF/jasperserver.license"]]},
                            "ignoreErrors" : "true"
                          },
                          "2-pullCustomizations" : {
                            "command" : { "Fn::Join" : ["", ["/usr/bin/aws --region ",{ "Ref": "AWS::Region" }," s3 cp s3://",{"Fn::If": ["CreateS3Bucket",{"Ref": "S3Bucket"},{"Ref": "S3BucketName"}]},"/ /var/lib/tomcat8/ --recursive"]]},
                            "ignoreErrors" : "true"
                          },
                          "3-enableCluster" : {
                            "command" : { "Fn::Join" : [" ",
                                            ["rm -fv",
                                            "/usr/share/jrs_dist/clusterConfig/applicationContext.xml &&",
                                            "/bin/cp -rf /usr/share/jrs_dist/clusterConfig/*",
                                            "/var/lib/tomcat8/webapps/jasperserver-pro/WEB-INF/ &&",
                                            "sed -i -r \"s/(.*)(sysProperties,transactionManagerConfiguration)(.*)/\\1\\2,broker-1\\3/\"",
                                            "/var/lib/tomcat8/webapps/jasperserver-pro/WEB-INF/applicationContext.xml"]]},
                            "ignoreErrors" : "false"
                          }
                        }
                   },
                   "Restart" : {
                        "sysvinit" : {
                            "services" : {
                              "tomcat8" : {
                                "enabled" : "true",
                                "ensureRunning" : "true",
                                "files" : ["/var/lib/tomcat8/webapps/jasperserver-pro/WEB-INF/classes/repository.properties","/var/lib/tomcat8/webapps/jasperserver-pro/WEB-INF/js.aws.properties"],
                                "commands" : ["1-pullLicense","2-pullCustomizations","3-enableCluster"]
                              }
                            }
                        }
                   }
                }
             },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "InstanceMonitoring": "true",
                "IamInstanceProfile": {
                    "Ref": "SetupRoleProfile"
                },
                "InstanceType": {
                    "Ref": "WorkloadInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "WorkloadSecurityGroup"
                    }
                ],
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "Content-Type: multipart/mixed; boundary=\"//\"\n",
                    "MIME-Version: 1.0\n",
                    "\n",
                    "--//\n",
                    "Content-Type: text/cloud-config; charset=\"us-ascii\"\n",
                    "MIME-Version: 1.0\n",
                    "Content-Transfer-Encoding: 7bit\n",
                    "Content-Disposition: attachment; filename=\"cloud-config.txt\"\n",
                    "\n",
                    "#cloud-config\n",
                    "cloud_final_modules:\n",
                    "- [scripts-user, always]\n",
                    "\n",
                    "--//\n",
                    "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
                    "MIME-Version: 1.0\n",
                    "Content-Transfer-Encoding: 7bit\n",
                    "Content-Disposition: attachment; filename=\"userdata.txt\"\n",
                    "\n",
                    "#!/bin/bash -xe\n",
                    "yum install -y aws-cfn-bootstrap\n",
                    "# Install the files and packages from the metadata\n",
                    "/opt/aws/bin/cfn-init ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource WorkloadASLaunchConfig",
                    "         --configsets ConfigureAndRestart",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]}}
            }
        },
        "WorkloadScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WorkloadAutoScalingGroup"
                },
                "Cooldown": "300",
                "ScalingAdjustment": "1"
            }
        },
        "WorkloadScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WorkloadAutoScalingGroup"
                },
                "Cooldown": "300",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 60% for 5 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "5",
                "Threshold": "60",
                "AlarmActions": [
                    {
                        "Ref": "WorkloadScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WorkloadAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 40% for 30 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "30",
                "Threshold": "40",
                "AlarmActions": [
                    {
                        "Ref": "WorkloadScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WorkloadAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "WorkloadAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PrivateSubnet1ID"
                    },
                    {
                        "Ref": "PrivateSubnet2ID"
                    }
                ],
                "Cooldown": "600",
                "DesiredCapacity": {
                    "Ref": "WorkloadNodesDesiredCapacity"
                },
                "HealthCheckGracePeriod": "600",
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": {
                    "Ref": "WorkloadASLaunchConfig"
                },
                "TargetGroupARNs" : [{ "Ref" : "WorkloadTargetGroup"}],
                "MaxSize": {
                    "Ref": "WorkloadNodesMaxSize"
                },
                "MinSize": {
                    "Ref": "WorkloadNodesMinSize"
                },
                "NotificationConfigurations": {
                  "Fn::If": ["NotificationsEnabled",[{
                    "TopicARN": {
                      "Ref": "NotificationTopic"
                    },
                    "NotificationTypes": [
                      "autoscaling:EC2_INSTANCE_LAUNCH",
                      "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                      "autoscaling:EC2_INSTANCE_TERMINATE",
                      "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                      "autoscaling:TEST_NOTIFICATION"
                    ]
                  }],{"Ref": "AWS::NoValue"}]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-JasperReports Server"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "DependsOn" : "RDSInitWaitCondition"
        },
        "WorkloadSqsQueue" : {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "DelaySeconds": 0,
                "MessageRetentionPeriod": 3600,
                "ReceiveMessageWaitTimeSeconds": 0,
                "VisibilityTimeout": 1
            },
            "DependsOn" : "RDSInitWaitCondition"
        },
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Condition" : "CreateS3Bucket",
            "Properties": {
                "AccessControl": "BucketOwnerFullControl"
            },
            "DeletionPolicy" : "Retain",
            "DependsOn" : "RDSInitWaitCondition"
        }
    },
    "Outputs": {
        "GettingStartedPublicURL": {
            "Description": "TIBCO JasperReports Getting Started URL",
            "Value": {
                "Fn::Join" : ["", ["http://",
                    { "Fn::GetAtt": [
                        "ElasticLoadBalancer",
                        "DNSName"
                        ]
                    }
                ]] },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-URL"
                }
            }
        },
        "S3CustomizationBucket" : {
            "Value" : {"Fn::If": ["CreateS3Bucket",{"Ref": "S3Bucket"},{"Ref": "S3BucketName"}]},
            "Description" : "S3 bucket where you can upload your license file \"jasperserver.license\" and customizations for product",
            "Export" : {
                "Name" : {
                    "Fn::Sub": "${AWS::StackName}-S3bucket"
                }
            }
        },
        "AutoscalingGroup" : {
            "Value": {"Ref": "WorkloadAutoScalingGroup"},
            "Description" : "JRS Autoscaling Group",
            "Export" : {
                "Name" : {
                    "Fn::Sub": "${AWS::StackName}-AutoscalingGroup"
                }
            }
        },
        "Login" : {
            "Value": "superuser",
            "Description": "Master user name"
        },
        "Password" : {
            "Value" :  "Same as provided password for database",
            "Description" : "Initial master user password"
        }
    }
}
